//c program to find and count prime numbers in given string
#include <stdio.h>
#include <ctype.h>
#include <math.h>

int main() {
    char s[100];
    int i, j, n, count = 0, k, isPrime;

    printf("Enter the string: ");
    scanf("%[^\n]s", s);

    printf("Prime numbers in the string: ");

    for (i = 0; s[i] != '\0'; i++)
    {
        if (isdigit(s[i])) 
        {
            n = s[i] - '0';
            for (j = i + 1; s[j] != '\0'; j++)
            {
                if (isdigit(s[j]))
                {
                    n = n * 10 + (s[j] - '0');
                }
                else 
                {
                    
                    break;
                }
            }
            i=j-1;
            

            // Check if number is prime (inline logic)
            if (n <= 1) 
            {
                continue;
            }
            isPrime = 1;
            for (k = 2; k <= sqrt(n); k++) 
            {
                if (n % k == 0) 
                {
                    isPrime = 0;
                    break;
                }
            }

            if (isPrime) 
            {
                printf("%d ", n);
                count++;
            }
        }
    }

    printf("\nTotal prime numbers found: %d\n", count);

    return 0;
}

//find largest prime in given string
#include <stdio.h>
#include <ctype.h>
#include <math.h>

int main() {
    char s[100];
    int i, j, n, k, isPrime;
    int maxPrime;
    int flag = 0;

    printf("Enter the string: ");
    scanf("%[^\n]s", s);

    for (i = 0; s[i] != '\0'; i++)
    {
        if (isdigit(s[i])) 
        {
            
            n = s[i] - '0';
            for (j = i + 1; s[j] != '\0'; j++) 
            {
                if (isdigit(s[j])) 
                {
                    n = n * 10 + (s[j] - '0');
                } 
                else
                {
                    break;
                }
            }
            i = j - 1;

            // Check if n is prime
            if (n > 1) {
                isPrime = 1;
                for (k = 2; k <= sqrt(n); k++) 
                {
                    if (n % k == 0)
                    {
                        isPrime = 0;
                        break;
                    }
                }

                
                if (isPrime) 
                {
                    if (flag == 0)
                    {
                        maxPrime = n;
                        flag = 1;
                    } 
                    else if (n > maxPrime) 
                    {
                        maxPrime = n;
                    }
                }
            }
        }
    }

    if (flag == 1) 
    {
        printf("The largest prime number in the string is: %d\n", maxPrime);
    } 
    else 
    {
        printf("No prime numbers found in the string.\n");
    }

    return 0;
}

//find a number that contains max number of prime didgits in a given string
#include <stdio.h>
#include <ctype.h>

int main() {
    char s[100];
    int i, j, n, primeDigitCount, maxCount = 0;
    int numberWithMaxPrimeDigits = 0;
    int digit, flag = 0;

    printf("Enter the string: ");
    scanf("%[^\n]s", s);

    for (i = 0; s[i] != '\0'; i++) 
    {
        if (isdigit(s[i])) 
        {
            n = s[i] - '0';
            primeDigitCount = 0;

           
            if (s[i] == '2' || s[i] == '3' || s[i] == '5' || s[i] == '7') 
            {
                primeDigitCount++;
            }

            for (j = i + 1; s[j] != '\0'; j++)
            {
                if (isdigit(s[j]))
                {
                    digit = s[j] - '0';
                    n = n * 10 + digit;

                    if (digit == 2 || digit == 3 || digit == 5 || digit == 7) 
                    {
                        primeDigitCount++;
                    }
                } 
                else 
                {
                    break;
                }
            }

            i = j - 1;

            if (primeDigitCount > maxCount) 
            {
                maxCount = primeDigitCount;
                numberWithMaxPrimeDigits = n;
                flag = 1;
            }
        }
    }

    if (flag==1) 
    {
        printf("Number with maximum prime digits: %d\n", numberWithMaxPrimeDigits);
    }
    else 
    {
        printf("No numbers found in the string.\n");
    }

    return 0;
}

//count palindrome number in string
#include <stdio.h>
#include <ctype.h>

int main() {
    char s[100];
    int i, j, n, original, rev, count = 0;

    printf("Enter the string: ");
    scanf("%[^\n]s", s);

    for (i = 0; s[i] != '\0'; i++) 
    {
        if (isdigit(s[i])) 
        {
            // Extract the number
            n = s[i] - '0';
            for (j = i + 1; s[j] != '\0'; j++)
            {
                if (isdigit(s[j])) 
                {
                    n = n * 10 + (s[j] - '0');
                }
                else
                {
                    break;
                }
            }
            i = j - 1;

            // Check if number is palindrome
            original = n;
            rev = 0;
            while (n > 0) {
                rev = rev * 10 + (n % 10);
                n /= 10;
            }

            if (rev == original) {
                count++;
            }
        }
    }

    printf("Total palindrome numbers in the string: %d\n", count);

    return 0;
}

//sum of palindrome numbers 
#include <stdio.h>
#include <ctype.h>

int main() {
    char s[100];
    int i, j, n, original, rev, sum = 0;

    printf("Enter the string: ");
    scanf("%[^\n]s", s);

    for (i = 0; s[i] != '\0'; i++)
    {
        if (isdigit(s[i]))
        {
            // Extract number from string
            n = s[i] - '0';
            for (j = i + 1; s[j] != '\0'; j++) 
            {
                if (isdigit(s[j])) 
                {
                    n = n * 10 + (s[j] - '0');
                } 
                else 
                {
                    break;
                }
            }
            i = j - 1;

            // Check if number is palindrome
            original = n;
            rev = 0;
            while (n > 0) 
            {
                rev = rev * 10 + (n % 10);
                n = n / 10;
            }

            if (rev == original) 
            {
                sum = sum+ original;  
            }
        }
    }

    printf("Sum of all palindrome numbers in the string: %d\n", sum);

    return 0;
}

//without string handling  fn(palindrome with test cases)
#include <stdio.h>
#include <ctype.h> 

int main() 
{
    char str[100];
    int len = 0, i, flag = 0;

    printf("Enter a string: ");
    scanf("%s", str);

    // Find string length without using strlen()
    while (str[len] != '\0')
    {
        len++;
    }

    // Check for palindrome
    for (i = 0; i < len / 2; i++)
    {
        char ch1 = tolower(str[i]);
        char ch2 = tolower(str[len - 1 - i]);

        if (ch1 != ch2) 
        {
            flag = 1;
            break;
        }
    }

    if (flag == 0)
    {
        printf("Palindrome\n");
    } 
    else 
    {
        printf("Not Palindrome\n");
    }

    return 0;
}

//strcmp fn
#include<stdio.h>
#include<string.h>
int main()
{
    char ch[50];
    char correctpassword[]="1234";
    printf("enter the password");
    scanf("%s",ch);
    
    if(strcmp(ch,correctpassword)==0)
    {
        printf("password is correct\n");
        
    }
    else
    {
        printf("password is incorrect\n");
    }
    return 0;
}